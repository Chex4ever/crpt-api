package ru.selsup.test;

import ru.CryptoPro.JCSP.JCSP;
import java.security.Security;

public class DirectCryptoProAccess {

    static {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        try {
            Security.removeProvider("JCSP");
            Security.addProvider(new JCSP());
            System.out.println("JCSP –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ JCSP: " + e.getMessage());
        }
    }

    public static void listContainers() {
        try {
            System.out.println("=== –ü–†–Ø–ú–û–ô –î–û–°–¢–£–ü –ö –ö–†–ò–ü–¢–û–ü–†–û ===");
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º reflection –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∫–ª–∞—Å—Å–∞–º
            Class<?> configClass = Class.forName("ru.CryptoPro.JCSP.KeyStore.KeyStoreConfig");
            java.lang.reflect.Method getReadersMethod = configClass.getMethod("getReaders");
            
            Object[] readers = (Object[]) getReadersMethod.invoke(null);
            System.out.println("–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: " + readers.length);
            
            for (Object reader : readers) {
                Class<?> readerClass = reader.getClass();
                java.lang.reflect.Method getNameMethod = readerClass.getMethod("getName");
                java.lang.reflect.Method getTypeMethod = readerClass.getMethod("getType");
                
                String name = (String) getNameMethod.invoke(reader);
                String type = (String) getTypeMethod.invoke(reader);
                
                System.out.println("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: " + name + " (—Ç–∏–ø: " + type + ")");
                
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                try {
                    java.lang.reflect.Method getKeyStoreMethod = configClass.getMethod("getKeyStore", String.class);
                    Object keyStore = getKeyStoreMethod.invoke(null, name);
                    
                    if (keyStore != null) {
                        Class<?> keyStoreClass = keyStore.getClass();
                        java.lang.reflect.Method aliasesMethod = keyStoreClass.getMethod("aliases");
                        
                        String[] aliases = (String[]) aliasesMethod.invoke(keyStore);
                        System.out.println("   –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: " + (aliases != null ? aliases.length : 0));
                        
                        if (aliases != null) {
                            for (String alias : aliases) {
                                java.lang.reflect.Method getCertificateMethod = keyStoreClass.getMethod("getCertificate", String.class);
                                Object cert = getCertificateMethod.invoke(keyStore, alias);
                                
                                if (cert != null) {
                                    System.out.println("   üìÑ " + alias);
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    System.out.println("   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: " + e.getMessage());
                }
            }
            
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        listContainers();
    }
}